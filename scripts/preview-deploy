#!/usr/bin/env ruby

# edit as necessary
url        = 'best-linux.cs.wisc.edu'
username   = 'tolly'
password   = File.read("#{Dir.home}/pw/csl").strip
remote_dir = '/afs/cs.wisc.edu/u/t/o/tolly/public/html/customs'

require 'net/sftp'
require_relative 'common'

def log(s)
  STDERR.puts s
end

def mkdir_f(sftp, dir)
  sftp.mkdir! dir
rescue Net::SFTP::StatusException
  # directory already exists
end

def upload_rf(sftp, from, to)
  log "Uploading #{from} to #{to}"
  if File.file?(from)
    begin
      sftp.remove! to
    rescue Net::SFTP::StatusException
      # file doesn't already exist
    end
    sftp.upload! from, to
  else
    mkdir_f sftp, to
    Dir.entries(from).each do |ent|
      next if %w{. .. .DS_Store .gitignore .git deploy.rb}.include? ent
      full_from = "#{from}/#{ent}"
      full_to = "#{to}/#{ent}"
      if File.file?(full_from)
        upload_rf sftp, full_from, full_to
      else
        mkdir_f sftp, full_to
        upload_rf sftp, full_from, full_to
      end
    end
  end
end

Net::SFTP.start(url, username, password: password) do |sftp|
  log " => Connected #{username}@#{url} via SFTP."
  if ARGV.include? 'app'
    Dir.chdir('haskell/web-display') do
      system_ 'make', 'minify'
    end
    upload_rf sftp, 'haskell/web-display/www/index.html', "#{remote_dir}/index.html"
    upload_rf sftp, 'haskell/web-display/www/app.min.js', "#{remote_dir}/app.min.js"
    upload_rf sftp, 'haskell/web-display/www/runmain.js', "#{remote_dir}/runmain.js"
    upload_rf sftp, 'haskell/web-display/www/images'    , "#{remote_dir}/images"
    upload_rf sftp, 'haskell/web-display/www/lib'       , "#{remote_dir}/lib"
  end
  first_option = ARGV.index { |arg| arg.start_with? '-' }
  not_options = first_option ? ARGV[0 ... first_option] : ARGV
  onyx_options = first_option ? ARGV[first_option .. -1].reject { |x| x == '--only-midi' } : []
  only_mid = ARGV.include?('--only-midi')
  not_options.each do |songdir|
    next if songdir == 'app'
    next unless File.exist? "#{songdir}/song.yml"
    yaml = load_yaml_tree("#{songdir}/song.yml")
    next unless yaml.fetch('published', true)

    songfiles =
      if only_mid
        %w{gen/plan/album/2p/notes.mid}
      else
        %w{gen/plan/album/2p/notes.mid gen/plan/album/preview-audio.ogg gen/plan/album/preview-audio.mp3}
      end
    Dir.chdir(songdir) do
      system_('onyx', 'build', *songfiles, *onyx_options)
    end
    dirs = "#{songdir}/gen/plan/album/2p".split('/').reject(&:empty?)
    dirs.each_index do |i|
      # make each directory in the chain
      mkdir_f sftp, "#{remote_dir}/#{dirs[0..i].join('/')}"
    end
    songfiles.each do |f|
      path = "#{songdir}/#{f}"
      upload_rf sftp, path, "#{remote_dir}/#{path}"
    end
  end
end
