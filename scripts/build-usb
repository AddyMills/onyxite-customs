#!/usr/bin/env ruby

# Builds some CONs, and copies them onto a (plain FAT32, not FATX) Xbox 360 USB drive.

require 'fileutils'
require_relative 'common'

dash = ARGV.index { |s| s.start_with? '--' } || ARGV.length
if dash < 2
  STDERR.puts "Usage: #{$0} path/to/song1 [path/to/song2 ...] /Volumes/MyUSBDrive/ [--onyxbuild-options]"
  exit 1
end
songs = ARGV[0 .. dash - 2]
usb = ARGV[dash - 1]
options = ARGV[dash .. -1]
only_album = options.include?('--only-album')
one_pedal = options.include?('--1p')
pedal = one_pedal ? '1p' : '2p'
options.select! { |x| !(%w{--only-album --1p}.include? x) }

rb3 = "#{usb}/Content/0000000000000000/45410914/00000001"
FileUtils.mkdir_p rb3

class String
  def javahash
    self.chars.each_with_index.map do |c, i|
      c.ord * 31 ** (self.length - (i + 1) )
    end.inject(:+)
  end
end

unsuccessful = []
songs.each do |song|
  p song
  unless File.exist? "#{song}/song.yml"
    puts "Skipping because no song.yml."
    next
  end
  yaml = load_yaml_tree("#{song}/song.yml")
  if yaml.has_key?('published') && !(yaml['published'])
    puts "Skipping because not published."
    next
  end
  plans = yaml['plans'].keys.sort_by do |plan|
    case plan
    when 'jammit', 'pledgemusic', 'deluxe', 'mogg' then 0
    when 'drumcam' then 1
    when 'hdtracks' then 2
    when 'album' then 4
    else 3
    end
  end
  plans = ['album'] if only_album
  # try each plan, with multitrack and high quality ones first
  successful = nil
  plans.each do |plan|
    begin
      system_ 'onyxbuild', '--song', "#{song}/song.yml", "gen/plan/#{plan}/#{pedal}/rb3.con", *options
      successful = plan
    rescue IOError
      # not successful, try next plan
    end
    break if successful
  end
  if successful
    version = "gen/plan/#{successful}/#{pedal}"
    hashed = yaml['metadata']['title'] + ' by ' + yaml['metadata']['artist']
    short_title = yaml['metadata']['title'].gsub(/[^A-Za-z0-9]/, '')
    if short_title.length > 20
      short_title = short_title[0..9] + '...' + short_title[-7..-1]
    end
    con_title = "#{short_title}_#{pedal}_#{hashed.javahash % 10000}"
    FileUtils.cp "#{song}/#{version}/rb3.con", "#{rb3}/#{con_title}"
  else
    unsuccessful << song
  end
end
unless unsuccessful.empty?
  STDERR.puts "Some songs failed to build:"
  unsuccessful.each { |song| STDERR.puts song }
end
